package com.openbexi.timeline.data_browser;

// This class has been generated by ChatGPT according the following specification:
/* create abstract java classe "data_configuration" which import org.json.simple,
 include javadoc,
 the private method "read" to read the following Jason,
  and all getter to get all properties of startup configuration: {
  "startup configuration": [
    {
      "-type": "json file",
      "-url": "/data/yyyy/mm/dd",
      "-filter_include":"",
      "-filter_exclude":"",
      "-connector": "secure_sse:8443|secure: 8445"
    },
    {
      "-type": "mongoDb",
      "-url": "",
      "-database": "",
      "-collection": "",
      "-connector": "secure_sse:8443|secure: 8445"
    },
       {
      "-type": "kafka",
      "-url": "",
      "-topicName": "",
      "-compression.type": "",
      "-retention.ms": "",
      "-Partitions.ms": "",
      "-consumerName": "",
      "-consumerGroup": "",
      "-producerName": "",
      "-producerGroup": "",
      "version": "",
      "security.protocol": "",
      "sasl.mechanism": "",
      "-connector": ""
    }
    }
        */

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import java.io.FileReader;
import java.io.IOException;

/**
 * An class that provides a framework for reading a data configuration file in JSON format and accessing its properties.
 */
public class data_configuration {
    private final JSONObject configuration;

    public data_configuration(JSONObject configuration) {
        this.configuration = configuration;
    }

    /**
     * Constructs a new DataConfiguration object by reading the JSON configuration file at the specified path.
     *
     * @param configFilePath the path to the JSON configuration file
     * @throws IOException    if there is an error reading the configuration file
     * @throws ParseException if there is an error parsing the configuration file
     */
    public data_configuration(String configFilePath) throws IOException, ParseException {
        JSONParser parser = new JSONParser();
        this.configuration = (JSONObject) parser.parse(new FileReader(configFilePath));
    }

    public static void main(String[] args) {
        // create a new instance of DataConfig
        data_configuration configuration = null;
        try {
            configuration = new data_configuration("etc\\Intelsat_test_startup_conf.json");
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ParseException e) {
            throw new RuntimeException(e);
        }

        // call the testGetters() method to test all the getters
        try {
            configuration.testGetters(0);
        } catch (Exception e) {
            System.err.println("testGetters(0): " + e.getMessage());
            System.out.println("---------------------------------");
        }
        try {
            configuration.testGetters(1);
        } catch (Exception e) {
            System.err.println("testGetters(1): " + e.getMessage());
            System.out.println("---------------------------------");
        }
        try {
            configuration.testGetters(2);
        } catch (Exception e) {
            System.err.println("testGetters(2): " + e.getMessage());
            System.out.println("---------------------------------");
        }
        try {
            configuration.testGetters(3);
        } catch (Exception e) {
            System.err.println("testGetters(3): " + e.getMessage());
            System.out.println("---------------------------------");
        }
    }

    public String getType(int index) {
        JSONObject configNode = (JSONObject) ((JSONArray) configuration.get("startup configuration")).get(index);
        return (String) configNode.get("-type");
    }

    public String getFilter(int index) {
        JSONObject configNode = (JSONObject) ((JSONArray) configuration.get("startup configuration")).get(index);
        return (String) configNode.get("-filter");
    }

    public String getDataPath(int index) {
        JSONObject configNode = (JSONObject) ((JSONArray) configuration.get("startup configuration")).get(index);
        return (String) configNode.get("-data_path");
    }

    public String getDataModel(int index) {
        JSONObject configNode = (JSONObject) ((JSONArray) configuration.get("startup configuration")).get(index);
        return (String) configNode.get("-data_model");
    }

    public String getUrl(int index) {
        JSONObject configNode = (JSONObject) ((JSONArray) configuration.get("startup configuration")).get(index);
        return (String) configNode.get("-url");
    }

    public String getFilterInclude(int index) {
        JSONObject configNode = (JSONObject) ((JSONArray) configuration.get("startup configuration")).get(index);
        return (String) configNode.get("-filter_include");
    }

    public String getFilterExclude(int index) {
        JSONObject configNode = (JSONObject) ((JSONArray) configuration.get("startup configuration")).get(index);
        return (String) configNode.get("-filter_exclude");
    }

    public String getConnector(int index) {
        JSONObject configNode = (JSONObject) ((JSONArray) configuration.get("startup configuration")).get(index);
        return configNode.get("-connector").toString().replaceAll(" ", "");
    }

    public String getDatabase(int index) {
        JSONObject configNode = (JSONObject) ((JSONArray) configuration.get("startup configuration")).get(index);
        return (String) configNode.get("-database");
    }

    /**
     * Returns the value of the collection property from the configuration data.
     *
     * @return the value of the collection property as a string
     */
    public String getCollection(int index) {
        JSONObject configNode = (JSONObject) ((JSONArray) configuration.get("startup configuration")).get(index);
        return (String) configNode.get("-collection");
    }

    public String getTopicName(int index) {
        JSONObject configNode = (JSONObject) ((JSONArray) configuration.get("startup configuration")).get(index);
        return (String) configNode.get("-topicName");
    }

    public String getCompressionType(int index) {
        JSONObject configNode = (JSONObject) ((JSONArray) configuration.get("startup configuration")).get(index);
        return (String) configNode.get("-compression.type");
    }

    public String getRetentionMs(int index) {
        JSONObject configNode = (JSONObject) ((JSONArray) configuration.get("startup configuration")).get(index);
        return (String) configNode.get("-retention.ms");
    }

    public String getPartitionsMs(int index) {
        JSONObject configNode = (JSONObject) ((JSONArray) configuration.get("startup configuration")).get(index);
        return (String) configNode.get("-Partitions.ms");
    }

    public String getConsumerName(int index) {
        JSONObject configNode = (JSONObject) ((JSONArray) configuration.get("startup configuration")).get(index);
        return (String) configNode.get("-consumerName");
    }

    public String getConsumerGroup(int index) {
        JSONObject configNode = (JSONObject) ((JSONArray) configuration.get("startup configuration")).get(index);
        return (String) configNode.get("-consumerGroup");
    }

    public String getProducerName(int index) {
        JSONObject configNode = (JSONObject) ((JSONArray) configuration.get("startup configuration")).get(index);
        return (String) configNode.get("-producerName");
    }

    public String getProducerGroup(int index) {
        JSONObject configNode = (JSONObject) ((JSONArray) configuration.get("startup configuration")).get(index);
        return (String) configNode.get("-producerGroup");
    }

    public String getVersion(int index) {
        JSONObject configNode = (JSONObject) ((JSONArray) configuration.get("startup configuration")).get(index);
        return (String) configNode.get("version");
    }

    public String getSecurityProtocol(int index) {
        JSONObject configNode = (JSONObject) ((JSONArray) configuration.get("startup configuration")).get(index);
        return (String) configNode.get("security.protocol");
    }

    public String getSaslMechanism(int index) {
        JSONObject configNode = (JSONObject) ((JSONArray) configuration.get("startup configuration")).get(index);
        return (String) configNode.get("sasl.mechanism");
    }

    public void testGetters(int index) {
        // call all the getters and print the results
        System.out.println("Type: " + getType(index));
        System.out.println("data_path: " + getDataPath(index));
        System.out.println("data_model: " + getDataModel(index));
        System.out.println("Url: " + getUrl(index));
        System.out.println("Database: " + getDatabase(index));
        System.out.println("Collection: " + getCollection(index));
        System.out.println("Filter Include: " + getFilterInclude(index));
        System.out.println("Filter Exclude: " + getFilterExclude(index));
        System.out.println("Connector: " + getConnector(index));
        System.out.println("Kafka Topic Name: " + getTopicName(index));
        System.out.println("Kafka Compression Type: " + getCompressionType(index));
        System.out.println("Kafka Retention MS: " + getRetentionMs(index));
        System.out.println("Kafka Partitions MS: " + getPartitionsMs(index));
        System.out.println("Kafka Consumer Name: " + getConsumerName(index));
        System.out.println("Kafka Consumer Group: " + getConsumerGroup(index));
        System.out.println("Kafka Producer Name: " + getProducerName(index));
        System.out.println("Kafka Producer Group: " + getProducerGroup(index));
        System.out.println("Kafka Version: " + getVersion(index));
        System.out.println("Kafka Security Protocol: " + getSecurityProtocol(index));
        System.out.println("Kafka SASL Mechanism: " + getSaslMechanism(index));
    }
}